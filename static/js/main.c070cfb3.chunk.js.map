{"version":3,"sources":["Navbar.js","Card.js","MemoryGame.js","serviceWorker.js","index.js"],"names":["Navbar","_ref","onNewGame","react_default","a","createElement","href","onClick","Card","props","style","showing","backgroundColor","className","CardState","HIDING","SHOWING","MATCHING","MemoryGame","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","cards","id","cardState","shuffle","state","noClick","handleNewGame","bind","assertThisInitialized","handleClick","map","c","objectSpread","setState","_this2","mapCardState","idsToChange","newCardState","includes","foundCard","find","showingCards","filter","ids","length","hidingCards","setTimeout","_this3","card","src_Card_0","key","src_Navbar_0","Component","Boolean","window","location","hostname","match","ReactDOM","render","MemoryGame_MemoryGame","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAiBeA,SAbA,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,UAAF,OACXC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,WAAR,gBACJH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,WAAWC,QAASL,GAA5B,iBCgBDM,SApBF,SAACC,GACV,IAAIC,EAAQ,GAIZ,OAHGD,EAAME,UACLD,EAAME,gBAAkBH,EAAMG,iBAG9BT,EAAAC,EAAAC,cAAA,OACIE,QAASE,EAAMF,QACfM,UAAU,iBACVH,MAAOA,MCRbI,EAAY,CACdC,OAAQ,EACRC,QAAS,EACTC,SAAU,GAGOC,cACjB,SAAAA,EAAYT,GAAO,IAAAU,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMb,IAEN,IAAIiB,EAAQ,CACR,CAACC,GAAI,EAAGC,UAAWd,EAAUC,OAAQH,gBAAiB,OACtD,CAACe,GAAI,EAAGC,UAAWd,EAAUC,OAAQH,gBAAiB,OACtD,CAACe,GAAI,EAAGC,UAAWd,EAAUC,OAAQH,gBAAiB,QACtD,CAACe,GAAI,EAAGC,UAAWd,EAAUC,OAAQH,gBAAiB,QACtD,CAACe,GAAI,EAAGC,UAAWd,EAAUC,OAAQH,gBAAiB,SACtD,CAACe,GAAI,EAAGC,UAAWd,EAAUC,OAAQH,gBAAiB,SACtD,CAACe,GAAI,EAAGC,UAAWd,EAAUC,OAAQH,gBAAiB,UACtD,CAACe,GAAI,EAAGC,UAAWd,EAAUC,OAAQH,gBAAiB,UACtD,CAACe,GAAI,EAAGC,UAAWd,EAAUC,OAAQH,gBAAiB,SACtD,CAACe,GAAI,EAAGC,UAAWd,EAAUC,OAAQH,gBAAiB,SACtD,CAACe,GAAI,GAAIC,UAAWd,EAAUC,OAAQH,gBAAiB,UACvD,CAACe,GAAI,GAAIC,UAAWd,EAAUC,OAAQH,gBAAiB,UACvD,CAACe,GAAI,GAAIC,UAAWd,EAAUC,OAAQH,gBAAiB,QACvD,CAACe,GAAI,GAAIC,UAAWd,EAAUC,OAAQH,gBAAiB,QACvD,CAACe,GAAI,GAAIC,UAAWd,EAAUC,OAAQH,gBAAiB,gBACvD,CAACe,GAAI,GAAIC,UAAWd,EAAUC,OAAQH,gBAAiB,iBAnB5C,OAsBfc,EAAQG,IAAQH,GAChBP,EAAKW,MAAQ,CAACJ,QAAOK,SAAS,GAE9BZ,EAAKa,cAAgBb,EAAKa,cAAcC,KAAnBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACrBA,EAAKgB,YAAchB,EAAKgB,YAAYF,KAAjBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KA1BJA,+EA8Bf,IAAIO,EAAQJ,KAAKQ,MAAMJ,MAAMU,IAAI,SAAAC,GAAC,OAAAjB,OAAAkB,EAAA,EAAAlB,CAAA,GAC3BiB,EAD2B,CAE9BT,UAAWd,EAAUC,WAEzBW,EAAQG,IAAQH,GAChBJ,KAAKiB,SAAS,CAACb,8CAGPC,GAAI,IAAAa,EAAAlB,KACRmB,EAAe,SAACf,EAAOgB,EAAaC,GACtC,OAAOjB,EAAMU,IAAI,SAAAC,GACb,OAAGK,EAAYE,SAASP,EAAEV,IACfP,OAAAkB,EAAA,EAAAlB,CAAA,GACAiB,EADP,CAEIT,UAAWe,IAGZN,KAITQ,EAAYvB,KAAKQ,MAAMJ,MAAMoB,KAAK,SAAAT,GAAC,OAAIA,EAAEV,KAAOA,IAEtD,IAAIL,KAAKQ,MAAMC,SAAWc,EAAUjB,YAAcd,EAAUC,OAA5D,CAIA,IAAIgB,GAAU,EAEVL,EAAQe,EAAanB,KAAKQ,MAAMJ,MAAO,CAACC,GAAKb,EAAUE,SAErD+B,EAAerB,EAAMsB,OAAO,SAACX,GAAD,OAAOA,EAAET,YAAcd,EAAUE,UAE7DiC,EAAMF,EAAaX,IAAI,SAAAC,GAAC,OAAIA,EAAEV,KAEpC,GAA4B,IAAxBoB,EAAaG,QAAgBH,EAAa,GAAGnC,kBAAoBmC,EAAa,GAAGnC,gBACjFc,EAAQe,EAAaf,EAAOuB,EAAKnC,EAAUG,eACxC,GAA4B,IAAxB8B,EAAaG,OAAc,CAClC,IAAIC,EAAcV,EAAaf,EAAOuB,EAAKnC,EAAUC,QASrD,OAPAgB,GAAU,OAEVT,KAAKiB,SAAS,CAACb,QAAOK,WAAU,WAC5BqB,WAAW,WACPZ,EAAKD,SAAS,CAACb,MAAOyB,EAAapB,SAAQ,KAC5C,QAIXT,KAAKiB,SAAS,CAACb,QAAOK,8CAGf,IAAAsB,EAAA/B,KACCI,EAAQJ,KAAKQ,MAAMJ,MAAMU,IAAI,SAACkB,GAAD,OAC/BnD,EAAAC,EAAAC,cAACkD,EAAD,CACIC,IAAKF,EAAK3B,GACVhB,QAAS2C,EAAK1B,YAAcd,EAAUC,OACtCH,gBAAiB0C,EAAK1C,gBACtBL,QAAS,kBAAM8C,EAAKlB,YAAYmB,EAAK3B,SAI7C,OACIxB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoD,EAAD,CAAQvD,UAAWoB,KAAKU,gBACvBN,UAhGuBgC,mBCCpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAAgBC,SAASC,eAAe,SD2HlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c070cfb3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Navbar.css';\n\nconst Navbar = ({onNewGame}) => (\n    <header>\n        <h2><a href=\"#Header\" >Memory Game</a></h2>\n        <nav>\n            <li><a href=\"#NewGame\" onClick={onNewGame}>New Game</a></li>\n        </nav>\n    </header>\n);\n\nNavbar.propTypes = {\n    onNewGame: PropTypes.func.isRequired\n};\n\nexport default Navbar;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Card.css';\n\nconst Card = (props) => {\n    let style = {};\n    if(props.showing) {\n        style.backgroundColor = props.backgroundColor;\n    }\n    return (\n        <div \n            onClick={props.onClick}\n            className=\"card-container\"\n            style={style}\n        />\n    );\n};\n\nCard.propTypes = {\n    showing: PropTypes.bool.isRequired,\n    backgroundColor: PropTypes.string.isRequired,\n    onClick:PropTypes.func.isRequired\n};\n\nexport default Card;","import React, {Component} from 'react';\nimport shuffle from 'shuffle-array';\nimport Navbar from './Navbar';\nimport Card from './Card';\n\nconst CardState = {\n    HIDING: 0,\n    SHOWING: 1,\n    MATCHING: 2\n}\n\nexport default class MemoryGame extends Component {\n    constructor(props) {\n        super(props);\n        \n        let cards = [\n            {id: 0, cardState: CardState.HIDING, backgroundColor: 'red'},\n            {id: 1, cardState: CardState.HIDING, backgroundColor: 'red'},\n            {id: 2, cardState: CardState.HIDING, backgroundColor: 'navy'},\n            {id: 3, cardState: CardState.HIDING, backgroundColor: 'navy'},\n            {id: 4, cardState: CardState.HIDING, backgroundColor: 'green'},\n            {id: 5, cardState: CardState.HIDING, backgroundColor: 'green'},\n            {id: 6, cardState: CardState.HIDING, backgroundColor: 'yellow'},\n            {id: 7, cardState: CardState.HIDING, backgroundColor: 'yellow'},\n            {id: 8, cardState: CardState.HIDING, backgroundColor: 'black'},\n            {id: 9, cardState: CardState.HIDING, backgroundColor: 'black'},\n            {id: 10, cardState: CardState.HIDING, backgroundColor: 'purple'},\n            {id: 11, cardState: CardState.HIDING, backgroundColor: 'purple'},\n            {id: 12, cardState: CardState.HIDING, backgroundColor: 'pink'},\n            {id: 13, cardState: CardState.HIDING, backgroundColor: 'pink'},\n            {id: 14, cardState: CardState.HIDING, backgroundColor: 'lightskyblue'},\n            {id: 15, cardState: CardState.HIDING, backgroundColor: 'lightskyblue'}\n        ];\n        \n        cards = shuffle(cards);\n        this.state = {cards, noClick: false};\n        \n        this.handleNewGame = this.handleNewGame.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    \n    handleNewGame() {\n        let cards = this.state.cards.map(c => ({\n            ...c,\n            cardState: CardState.HIDING\n        }));\n        cards = shuffle(cards);\n        this.setState({cards});\n    }\n    \n    handleClick(id) { \n      const mapCardState = (cards, idsToChange, newCardState) => {\n          return cards.map(c => {\n              if(idsToChange.includes(c.id)){\n                  return {\n                      ...c,\n                      cardState: newCardState\n                  };\n              }\n              return c;\n          });\n      }\n      \n      const foundCard = this.state.cards.find(c => c.id === id);\n      \n      if (this.state.noClick || foundCard.cardState !== CardState.HIDING){\n          return;\n      }\n      \n      let noClick = false;\n      \n      let cards = mapCardState(this.state.cards, [id], CardState.SHOWING);\n      \n      const showingCards = cards.filter((c) => c.cardState === CardState.SHOWING);\n      \n      const ids = showingCards.map(c => c.id);\n      \n      if (showingCards.length === 2 && showingCards[0].backgroundColor === showingCards[1].backgroundColor) {\n          cards = mapCardState(cards, ids, CardState.MATCHING);\n      } else if (showingCards.length === 2) {\n          let hidingCards = mapCardState(cards, ids, CardState.HIDING);\n          \n          noClick = true;\n          \n          this.setState({cards, noClick}, () => {\n              setTimeout(() => {\n                  this.setState({cards: hidingCards, noClick:false});\n              }, 1300);\n          });\n          return;\n      }\n      this.setState({cards, noClick});\n    }\n    \n    render() {\n        const cards = this.state.cards.map((card) => (\n            <Card\n                key={card.id}\n                showing={card.cardState !== CardState.HIDING}\n                backgroundColor={card.backgroundColor}\n                onClick={() => this.handleClick(card.id)}\n            />\n        ));\n        \n        return (\n            <div>\n                <Navbar onNewGame={this.handleNewGame} />\n                {cards}\n            </div>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MemoryGame from './MemoryGame';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MemoryGame />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}